{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux';\nimport ReduxThunk from 'redux-thunk';\n\nvar axios = require('axios');\n\nexport var actionTypes = {\n  FETCH_POSTS_SUCCESS: 'FETCH_POSTS_SUCCESS',\n  FETCH_POSTS_ERROR: 'FETCH_POSTS_ERROR'\n};\nexport var fetchPostsSuccess = function fetchPostsSuccess(posts) {\n  return {\n    type: actionTypes.FETCH_POSTS_SUCCESS,\n    posts: posts\n  };\n};\nexport var fetchPostsError = function fetchPostsError(error) {\n  return {\n    type: actionTypes.FETCH_POSTS_ERROR,\n    error: error\n  };\n};\nexport var fetchPosts = function fetchPosts() {\n  return function (dispatch) {\n    axios.get('https://simple-blog-api.crew.red/posts').then(function (response) {\n      dispatch(fetchPostsSuccess(response.data))[\"catch\"](function (error) {\n        dispatch(fetchPostsError(error));\n      });\n    });\n  };\n};\nvar initialPosts = {\n  posts: []\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialPosts;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case actionTypes.FETCH_POSTS_SUCCESS:\n      return {\n        posts: action.posts\n      };\n\n    case actionTypes.FETCH_POSTS_ERROR:\n      return {\n        error: action.error\n      };\n\n    default:\n      return state;\n  }\n};\n\nvar middleware = [ReduxThunk];\nvar enhancer = applyMiddleware.apply(void 0, middleware);\nexport var initializeStore = createStore(reducer, enhancer);","map":{"version":3,"sources":["C:/react/test_task/redux/store.js"],"names":["createStore","applyMiddleware","ReduxThunk","axios","require","actionTypes","FETCH_POSTS_SUCCESS","FETCH_POSTS_ERROR","fetchPostsSuccess","posts","type","fetchPostsError","error","fetchPosts","dispatch","get","then","response","data","initialPosts","reducer","state","action","middleware","enhancer","initializeStore"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,OAAOC,UAAP,MAAuB,aAAvB;;AACA,IAAMC,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AAEA,OAAO,IAAMC,WAAW,GAAG;AACzBC,EAAAA,mBAAmB,EAAE,qBADI;AAEzBC,EAAAA,iBAAiB,EAAE;AAFM,CAApB;AAKP,OAAO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAAAC,KAAK;AAAA,SAAK;AACzCC,IAAAA,IAAI,EAAEL,WAAW,CAACC,mBADuB;AAEzCG,IAAAA,KAAK,EAALA;AAFyC,GAAL;AAAA,CAA/B;AAKP,OAAO,IAAME,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK;AAAA,SAAK;AACvCF,IAAAA,IAAI,EAAEL,WAAW,CAACE,iBADqB;AAEvCK,IAAAA,KAAK,EAALA;AAFuC,GAAL;AAAA,CAA7B;AAKP,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa;AAAA,SAAM,UAAAC,QAAQ,EAAI;AAC1CX,IAAAA,KAAK,CAACY,GAAN,CAAU,wCAAV,EAAoDC,IAApD,CAAyD,UAAAC,QAAQ,EAAI;AACnEH,MAAAA,QAAQ,CAACN,iBAAiB,CAACS,QAAQ,CAACC,IAAV,CAAlB,CAAR,UAAiD,UAAAN,KAAK,EAAI;AACxDE,QAAAA,QAAQ,CAACH,eAAe,CAACC,KAAD,CAAhB,CAAR;AACD,OAFD;AAGD,KAJD;AAKD,GANyB;AAAA,CAAnB;AAQP,IAAMO,YAAY,GAAG;AACnBV,EAAAA,KAAK,EAAE;AADY,CAArB;;AAIA,IAAMW,OAAO,GAAG,SAAVA,OAAU,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBF,YAAyB;AAAA,MAAXG,MAAW;;AAChD,UAAQA,MAAM,CAACZ,IAAf;AACE,SAAKL,WAAW,CAACC,mBAAjB;AACE,aAAO;AACLG,QAAAA,KAAK,EAAEa,MAAM,CAACb;AADT,OAAP;;AAGF,SAAKJ,WAAW,CAACE,iBAAjB;AACE,aAAO;AACLK,QAAAA,KAAK,EAAEU,MAAM,CAACV;AADT,OAAP;;AAGF;AACE,aAAOS,KAAP;AAVJ;AAYD,CAbD;;AAeA,IAAME,UAAU,GAAG,CAACrB,UAAD,CAAnB;AACA,IAAMsB,QAAQ,GAAGvB,eAAe,MAAf,SAAmBsB,UAAnB,CAAjB;AAEA,OAAO,IAAME,eAAe,GAAGzB,WAAW,CAACoB,OAAD,EAAUI,QAAV,CAAnC","sourcesContent":["import { createStore, applyMiddleware } from 'redux';\r\nimport ReduxThunk from 'redux-thunk';\r\nconst axios = require('axios');\r\n\r\nexport const actionTypes = {\r\n  FETCH_POSTS_SUCCESS: 'FETCH_POSTS_SUCCESS',\r\n  FETCH_POSTS_ERROR: 'FETCH_POSTS_ERROR',\r\n};\r\n\r\nexport const fetchPostsSuccess = posts => ({\r\n  type: actionTypes.FETCH_POSTS_SUCCESS,\r\n  posts,\r\n});\r\n\r\nexport const fetchPostsError = error => ({\r\n  type: actionTypes.FETCH_POSTS_ERROR,\r\n  error,\r\n});\r\n\r\nexport const fetchPosts = () => dispatch => {\r\n  axios.get('https://simple-blog-api.crew.red/posts').then(response => {\r\n    dispatch(fetchPostsSuccess(response.data)).catch(error => {\r\n      dispatch(fetchPostsError(error));\r\n    });\r\n  });\r\n};\r\n\r\nconst initialPosts = {\r\n  posts: [],\r\n};\r\n\r\nconst reducer = (state = initialPosts, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.FETCH_POSTS_SUCCESS:\r\n      return {\r\n        posts: action.posts,\r\n      };\r\n    case actionTypes.FETCH_POSTS_ERROR:\r\n      return {\r\n        error: action.error,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst middleware = [ReduxThunk];\r\nconst enhancer = applyMiddleware(...middleware);\r\n\r\nexport const initializeStore = createStore(reducer, enhancer);\r\n"]},"metadata":{},"sourceType":"module"}