{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { createStore, applyMiddleware } from 'redux';\nimport nextConnectRedux from 'next-connect-redux';\nimport ReduxThunk from 'redux-thunk';\n\nvar axios = require('axios');\n\nexport var actionTypes = {\n  FETCH_POSTS_SUCCESS: 'FETCH_POSTS_SUCCESS'\n};\nexport var fetchPostsSuccess = function fetchPostsSuccess(posts) {\n  return {\n    type: actionTypes.FETCH_POSTS_SUCCESS,\n    posts: posts\n  };\n};\nexport var fetchPosts = function fetchPosts() {\n  return function (dispatch) {\n    axios.get('https://simple-blog-api.crew.red/posts').then(function (response) {\n      dispatch(fetchPostsSuccess(response.data));\n    });\n  };\n};\n\nvar getInitial = function getInitial() {\n  var request, posts;\n  return _regeneratorRuntime.async(function getInitial$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(axios.get('https://simple-blog-api.crew.red/posts'));\n\n        case 2:\n          request = _context.sent;\n          posts = request.data;\n          return _context.abrupt(\"return\", posts);\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nvar initialPosts = {\n  posts: getInitial()\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialPosts;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case actionTypes.FETCH_POSTS_SUCCESS:\n      return {\n        posts: action.posts\n      };\n\n    case actionTypes.FETCH_POSTS_ERROR:\n      return {\n        error: action.error\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport var store = function store() {\n  return createStore(reducer, initialPosts, applyMiddleware(ReduxThunk));\n};\nexport var nextConnect = nextConnectRedux(store);","map":{"version":3,"sources":["C:/react/test_task/redux/store.js"],"names":["createStore","applyMiddleware","nextConnectRedux","ReduxThunk","axios","require","actionTypes","FETCH_POSTS_SUCCESS","fetchPostsSuccess","posts","type","fetchPosts","dispatch","get","then","response","data","getInitial","request","initialPosts","reducer","state","action","FETCH_POSTS_ERROR","error","store","nextConnect"],"mappings":";AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,UAAP,MAAuB,aAAvB;;AACA,IAAMC,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AAEA,OAAO,IAAMC,WAAW,GAAG;AACzBC,EAAAA,mBAAmB,EAAE;AADI,CAApB;AAIP,OAAO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAAAC,KAAK;AAAA,SAAK;AACzCC,IAAAA,IAAI,EAAEJ,WAAW,CAACC,mBADuB;AAEzCE,IAAAA,KAAK,EAALA;AAFyC,GAAL;AAAA,CAA/B;AAKP,OAAO,IAAME,UAAU,GAAG,SAAbA,UAAa;AAAA,SAAM,UAAAC,QAAQ,EAAI;AAC1CR,IAAAA,KAAK,CAACS,GAAN,CAAU,wCAAV,EAAoDC,IAApD,CAAyD,UAAAC,QAAQ,EAAI;AACnEH,MAAAA,QAAQ,CAACJ,iBAAiB,CAACO,QAAQ,CAACC,IAAV,CAAlB,CAAR;AACD,KAFD;AAGD,GAJyB;AAAA,CAAnB;;AAMP,IAAMC,UAAU,GAAG,SAAbA,UAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACKb,KAAK,CAACS,GAAN,CAAU,wCAAV,CADL;;AAAA;AACXK,UAAAA,OADW;AAEXT,UAAAA,KAFW,GAEHS,OAAO,CAACF,IAFL;AAAA,2CAIVP,KAJU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB;;AAOA,IAAMU,YAAY,GAAG;AACnBV,EAAAA,KAAK,EAAEQ,UAAU;AADE,CAArB;;AAIA,IAAMG,OAAO,GAAG,SAAVA,OAAU,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBF,YAAyB;AAAA,MAAXG,MAAW;;AAChD,UAAQA,MAAM,CAACZ,IAAf;AACE,SAAKJ,WAAW,CAACC,mBAAjB;AACE,aAAO;AACLE,QAAAA,KAAK,EAAEa,MAAM,CAACb;AADT,OAAP;;AAGF,SAAKH,WAAW,CAACiB,iBAAjB;AACE,aAAO;AACLC,QAAAA,KAAK,EAAEF,MAAM,CAACE;AADT,OAAP;;AAGF;AACE,aAAOH,KAAP;AAVJ;AAYD,CAbD;;AAeA,OAAO,IAAMI,KAAK,GAAG,SAARA,KAAQ,GAAM;AACzB,SAAOzB,WAAW,CAACoB,OAAD,EAAUD,YAAV,EAAwBlB,eAAe,CAACE,UAAD,CAAvC,CAAlB;AACD,CAFM;AAIP,OAAO,IAAMuB,WAAW,GAAGxB,gBAAgB,CAACuB,KAAD,CAApC","sourcesContent":["import { createStore, applyMiddleware } from 'redux';\r\nimport nextConnectRedux from 'next-connect-redux'\r\nimport ReduxThunk from 'redux-thunk';\r\nconst axios = require('axios');\r\n\r\nexport const actionTypes = {\r\n  FETCH_POSTS_SUCCESS: 'FETCH_POSTS_SUCCESS',\r\n};\r\n\r\nexport const fetchPostsSuccess = posts => ({\r\n  type: actionTypes.FETCH_POSTS_SUCCESS,\r\n  posts,\r\n});\r\n\r\nexport const fetchPosts = () => dispatch => {\r\n  axios.get('https://simple-blog-api.crew.red/posts').then(response => {\r\n    dispatch(fetchPostsSuccess(response.data))\r\n  });\r\n};\r\n\r\nconst getInitial = async () => {\r\n  const request = await axios.get('https://simple-blog-api.crew.red/posts');\r\n  const posts = request.data;\r\n\r\n  return posts;\r\n}\r\n\r\nconst initialPosts = {\r\n  posts: getInitial(),\r\n};\r\n\r\nconst reducer = (state = initialPosts, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.FETCH_POSTS_SUCCESS:\r\n      return {\r\n        posts: action.posts,\r\n      };\r\n    case actionTypes.FETCH_POSTS_ERROR:\r\n      return {\r\n        error: action.error,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const store = () => {\r\n  return createStore(reducer, initialPosts, applyMiddleware(ReduxThunk));\r\n}\r\n\r\nexport const nextConnect = nextConnectRedux(store);"]},"metadata":{},"sourceType":"module"}