{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux';\nimport ReduxThunk from 'redux-thunk';\n\nconst axios = require('axios');\n\nexport const actionTypes = {\n  FETCH_POSTS_SUCCESS: 'FETCH_POSTS_SUCCESS',\n  FETCH_POSTS_ERROR: 'FETCH_POSTS_ERROR'\n};\nexport const fetchPostsSuccess = posts => ({\n  type: actionTypes.FETCH_POSTS_SUCCESS,\n  posts\n});\nexport const fetchPostsError = error => ({\n  type: actionTypes.FETCH_POSTS_ERROR,\n  error\n});\nexport const fetchPosts = () => dispatch => {\n  axios.get('https://simple-blog-api.crew.red/posts').then(response => {\n    dispatch(fetchPostsSuccess(response.data)).catch(error => {\n      dispatch(fetchPostsError(error));\n    });\n  });\n};\nconst initialPosts = {\n  posts: []\n};\n\nconst reducer = (state = initialPosts, action) => {\n  switch (action.type) {\n    case actionTypes.FETCH_POSTS_SUCCESS:\n      return {\n        posts: action.posts\n      };\n\n    case actionTypes.FETCH_POSTS_ERROR:\n      return {\n        error: action.error\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst middleware = [ReduxThunk];\nconst enhancer = applyMiddleware(...middleware);\nexport const initializeStore = createStore(reducer, enhancer);","map":{"version":3,"sources":["C:/react/test_task/redux/store.js"],"names":["createStore","applyMiddleware","ReduxThunk","axios","require","actionTypes","FETCH_POSTS_SUCCESS","FETCH_POSTS_ERROR","fetchPostsSuccess","posts","type","fetchPostsError","error","fetchPosts","dispatch","get","then","response","data","catch","initialPosts","reducer","state","action","middleware","enhancer","initializeStore"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,OAAOC,UAAP,MAAuB,aAAvB;;AACA,MAAMC,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AAEA,OAAO,MAAMC,WAAW,GAAG;AACzBC,EAAAA,mBAAmB,EAAE,qBADI;AAEzBC,EAAAA,iBAAiB,EAAE;AAFM,CAApB;AAKP,OAAO,MAAMC,iBAAiB,GAAGC,KAAK,KAAK;AACzCC,EAAAA,IAAI,EAAEL,WAAW,CAACC,mBADuB;AAEzCG,EAAAA;AAFyC,CAAL,CAA/B;AAKP,OAAO,MAAME,eAAe,GAAGC,KAAK,KAAK;AACvCF,EAAAA,IAAI,EAAEL,WAAW,CAACE,iBADqB;AAEvCK,EAAAA;AAFuC,CAAL,CAA7B;AAKP,OAAO,MAAMC,UAAU,GAAG,MAAMC,QAAQ,IAAI;AAC1CX,EAAAA,KAAK,CAACY,GAAN,CAAU,wCAAV,EAAoDC,IAApD,CAAyDC,QAAQ,IAAI;AACnEH,IAAAA,QAAQ,CAACN,iBAAiB,CAACS,QAAQ,CAACC,IAAV,CAAlB,CAAR,CAA2CC,KAA3C,CAAiDP,KAAK,IAAI;AACxDE,MAAAA,QAAQ,CAACH,eAAe,CAACC,KAAD,CAAhB,CAAR;AACD,KAFD;AAGD,GAJD;AAKD,CANM;AAQP,MAAMQ,YAAY,GAAG;AACnBX,EAAAA,KAAK,EAAE;AADY,CAArB;;AAIA,MAAMY,OAAO,GAAG,CAACC,KAAK,GAAGF,YAAT,EAAuBG,MAAvB,KAAkC;AAChD,UAAQA,MAAM,CAACb,IAAf;AACE,SAAKL,WAAW,CAACC,mBAAjB;AACE,aAAO;AACLG,QAAAA,KAAK,EAAEc,MAAM,CAACd;AADT,OAAP;;AAGF,SAAKJ,WAAW,CAACE,iBAAjB;AACE,aAAO;AACLK,QAAAA,KAAK,EAAEW,MAAM,CAACX;AADT,OAAP;;AAGF;AACE,aAAOU,KAAP;AAVJ;AAYD,CAbD;;AAeA,MAAME,UAAU,GAAG,CAACtB,UAAD,CAAnB;AACA,MAAMuB,QAAQ,GAAGxB,eAAe,CAAC,GAAGuB,UAAJ,CAAhC;AAEA,OAAO,MAAME,eAAe,GAAG1B,WAAW,CAACqB,OAAD,EAAUI,QAAV,CAAnC","sourcesContent":["import { createStore, applyMiddleware } from 'redux';\r\nimport ReduxThunk from 'redux-thunk';\r\nconst axios = require('axios');\r\n\r\nexport const actionTypes = {\r\n  FETCH_POSTS_SUCCESS: 'FETCH_POSTS_SUCCESS',\r\n  FETCH_POSTS_ERROR: 'FETCH_POSTS_ERROR',\r\n};\r\n\r\nexport const fetchPostsSuccess = posts => ({\r\n  type: actionTypes.FETCH_POSTS_SUCCESS,\r\n  posts,\r\n});\r\n\r\nexport const fetchPostsError = error => ({\r\n  type: actionTypes.FETCH_POSTS_ERROR,\r\n  error,\r\n});\r\n\r\nexport const fetchPosts = () => dispatch => {\r\n  axios.get('https://simple-blog-api.crew.red/posts').then(response => {\r\n    dispatch(fetchPostsSuccess(response.data)).catch(error => {\r\n      dispatch(fetchPostsError(error));\r\n    });\r\n  });\r\n};\r\n\r\nconst initialPosts = {\r\n  posts: [],\r\n};\r\n\r\nconst reducer = (state = initialPosts, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.FETCH_POSTS_SUCCESS:\r\n      return {\r\n        posts: action.posts,\r\n      };\r\n    case actionTypes.FETCH_POSTS_ERROR:\r\n      return {\r\n        error: action.error,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst middleware = [ReduxThunk];\r\nconst enhancer = applyMiddleware(...middleware);\r\n\r\nexport const initializeStore = createStore(reducer, enhancer);\r\n"]},"metadata":{},"sourceType":"module"}