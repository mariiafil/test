{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux';\nimport nextConnectRedux from 'next-connect-redux';\nimport ReduxThunk from 'redux-thunk';\n\nvar axios = require('axios');\n\nexport var actionTypes = {\n  FETCH_POSTS_SUCCESS: 'FETCH_POSTS_SUCCESS',\n  FETCH_POSTS_ID: 'FETCH_POSTS_ID',\n  ADD_POST: 'ADD_POST'\n};\nexport var fetchPostsSuccess = function fetchPostsSuccess(posts) {\n  return {\n    type: actionTypes.FETCH_POSTS_SUCCESS,\n    posts: posts\n  };\n};\nexport var fetchPostsSucces = function fetchPostsSucces(posts) {\n  return {\n    type: actionTypes.FETCH_POSTS_SUCCESS,\n    posts: posts\n  };\n};\nexport var fetchPosts = function fetchPosts() {\n  return function (dispatch) {\n    axios.get('https://simple-blog-api.crew.red/posts').then(function (response) {\n      dispatch(fetchPostsSuccess(response.data));\n    });\n  };\n};\nexport var fetchPostWithId = function fetchPostWithId(id) {\n  return function (dispatch) {\n    axios.get(\"https://simple-blog-api.crew.red/posts/\".concat(id)).then(function () {\n      dispatch(deletePostSuccess(id));\n    });\n  };\n};\nexport var addPost = function addPost(post) {\n  return function (dispatch) {\n    axios.post('https://simple-blog-api.crew.red/posts', post).then(function (response) {\n      dispatch(addPostSuccess(response.data));\n    });\n  };\n};\nvar initialPosts = {\n  posts: []\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialPosts;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case actionTypes.FETCH_POSTS_SUCCESS:\n      return {\n        posts: action.posts\n      };\n\n    case actionTypes.FETCH_POSTS_ERROR:\n      return {\n        error: action.error\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport var store = function store() {\n  return createStore(reducer, initialPosts, applyMiddleware(ReduxThunk));\n};\nexport var nextConnect = nextConnectRedux(store);","map":{"version":3,"sources":["C:/react/test_task/redux/store.js"],"names":["createStore","applyMiddleware","nextConnectRedux","ReduxThunk","axios","require","actionTypes","FETCH_POSTS_SUCCESS","FETCH_POSTS_ID","ADD_POST","fetchPostsSuccess","posts","type","fetchPostsSucces","fetchPosts","dispatch","get","then","response","data","fetchPostWithId","id","deletePostSuccess","addPost","post","addPostSuccess","initialPosts","reducer","state","action","FETCH_POSTS_ERROR","error","store","nextConnect"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,UAAP,MAAuB,aAAvB;;AACA,IAAMC,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AAEA,OAAO,IAAMC,WAAW,GAAG;AACzBC,EAAAA,mBAAmB,EAAE,qBADI;AAEzBC,EAAAA,cAAc,EAAE,gBAFS;AAGzBC,EAAAA,QAAQ,EAAE;AAHe,CAApB;AAOP,OAAO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAAAC,KAAK;AAAA,SAAK;AACzCC,IAAAA,IAAI,EAAEN,WAAW,CAACC,mBADuB;AAEzCI,IAAAA,KAAK,EAALA;AAFyC,GAAL;AAAA,CAA/B;AAKP,OAAO,IAAME,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAAF,KAAK;AAAA,SAAK;AACxCC,IAAAA,IAAI,EAAEN,WAAW,CAACC,mBADsB;AAExCI,IAAAA,KAAK,EAALA;AAFwC,GAAL;AAAA,CAA9B;AAKP,OAAO,IAAMG,UAAU,GAAG,SAAbA,UAAa;AAAA,SAAM,UAAAC,QAAQ,EAAI;AAC1CX,IAAAA,KAAK,CACFY,GADH,CACO,wCADP,EAEGC,IAFH,CAEQ,UAAAC,QAAQ,EAAI;AAChBH,MAAAA,QAAQ,CAACL,iBAAiB,CAACQ,QAAQ,CAACC,IAAV,CAAlB,CAAR;AACH,KAJD;AAKD,GANyB;AAAA,CAAnB;AAQP,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,EAAE;AAAA,SAAI,UAAAN,QAAQ,EAAI;AAC/CX,IAAAA,KAAK,CACFY,GADH,kDACiDK,EADjD,GAEGJ,IAFH,CAEQ,YAAM;AACVF,MAAAA,QAAQ,CAACO,iBAAiB,CAACD,EAAD,CAAlB,CAAR;AACD,KAJH;AAKD,GANgC;AAAA,CAA1B;AAQP,OAAO,IAAME,OAAO,GAAG,SAAVA,OAAU,CAAAC,IAAI;AAAA,SAAI,UAAAT,QAAQ,EAAI;AACzCX,IAAAA,KAAK,CACFoB,IADH,CACQ,wCADR,EACkDA,IADlD,EAEGP,IAFH,CAEQ,UAAAC,QAAQ,EAAI;AAChBH,MAAAA,QAAQ,CAACU,cAAc,CAACP,QAAQ,CAACC,IAAV,CAAf,CAAR;AACD,KAJH;AAKD,GAN0B;AAAA,CAApB;AAQP,IAAMO,YAAY,GAAG;AACnBf,EAAAA,KAAK,EAAE;AADY,CAArB;;AAIA,IAAMgB,OAAO,GAAG,SAAVA,OAAU,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBF,YAAyB;AAAA,MAAXG,MAAW;;AAChD,UAAQA,MAAM,CAACjB,IAAf;AACE,SAAKN,WAAW,CAACC,mBAAjB;AACE,aAAO;AACLI,QAAAA,KAAK,EAAEkB,MAAM,CAAClB;AADT,OAAP;;AAGF,SAAKL,WAAW,CAACwB,iBAAjB;AACE,aAAO;AACLC,QAAAA,KAAK,EAAEF,MAAM,CAACE;AADT,OAAP;;AAGF;AACE,aAAOH,KAAP;AAVJ;AAYD,CAbD;;AAeA,OAAO,IAAMI,KAAK,GAAG,SAARA,KAAQ,GAAM;AACzB,SAAOhC,WAAW,CAAC2B,OAAD,EAAUD,YAAV,EAAwBzB,eAAe,CAACE,UAAD,CAAvC,CAAlB;AACD,CAFM;AAIP,OAAO,IAAM8B,WAAW,GAAG/B,gBAAgB,CAAC8B,KAAD,CAApC","sourcesContent":["import { createStore, applyMiddleware } from 'redux';\r\nimport nextConnectRedux from 'next-connect-redux'\r\nimport ReduxThunk from 'redux-thunk';\r\nconst axios = require('axios');\r\n\r\nexport const actionTypes = {\r\n  FETCH_POSTS_SUCCESS: 'FETCH_POSTS_SUCCESS',\r\n  FETCH_POSTS_ID: 'FETCH_POSTS_ID',\r\n  ADD_POST: 'ADD_POST',\r\n  \r\n};\r\n\r\nexport const fetchPostsSuccess = posts => ({\r\n  type: actionTypes.FETCH_POSTS_SUCCESS,\r\n  posts,\r\n});\r\n\r\nexport const fetchPostsSucces = posts => ({\r\n  type: actionTypes.FETCH_POSTS_SUCCESS,\r\n  posts,\r\n});\r\n\r\nexport const fetchPosts = () => dispatch => {\r\n  axios\r\n    .get('https://simple-blog-api.crew.red/posts')\r\n    .then(response => {\r\n      dispatch(fetchPostsSuccess(response.data))\r\n  });\r\n};\r\n\r\nexport const fetchPostWithId = id => dispatch => {\r\n  axios\r\n    .get(`https://simple-blog-api.crew.red/posts/${id}`)\r\n    .then(() => {\r\n      dispatch(deletePostSuccess(id));\r\n    });\r\n};\r\n\r\nexport const addPost = post => dispatch => {\r\n  axios\r\n    .post('https://simple-blog-api.crew.red/posts', post)\r\n    .then(response => {\r\n      dispatch(addPostSuccess(response.data));\r\n    });\r\n};\r\n\r\nconst initialPosts = {\r\n  posts: [],\r\n};\r\n\r\nconst reducer = (state = initialPosts, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.FETCH_POSTS_SUCCESS:\r\n      return {\r\n        posts: action.posts,\r\n      };\r\n    case actionTypes.FETCH_POSTS_ERROR:\r\n      return {\r\n        error: action.error,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const store = () => {\r\n  return createStore(reducer, initialPosts, applyMiddleware(ReduxThunk));\r\n}\r\n\r\nexport const nextConnect = nextConnectRedux(store);"]},"metadata":{},"sourceType":"module"}