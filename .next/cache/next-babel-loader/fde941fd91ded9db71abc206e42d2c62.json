{"ast":null,"code":"// import React from 'react';\n// import { initializeStore } from '../store';\n// const isServer = typeof window === 'undefined';\n// const __NEXT_REDUX_STORE__ = '__NEXT_REDUX_STORE__';\n// function getOrCreateStore(initialState) {\n//   // Always make a new store if server, otherwise state is shared between requests\n//   if (isServer) {\n//     return initializeStore(initialState);\n//   }\n//   // Create store if unavailable on the client and set it on the window object\n//   if (!window[__NEXT_REDUX_STORE__]) {\n//     window[__NEXT_REDUX_STORE__] = initializeStore(initialState);\n//   }\n//   return window[__NEXT_REDUX_STORE__];\n// }\n// export default App => {\n//   return class AppWithRedux extends React.Component {\n//     static async getInitialProps(appContext) {\n//       // Get or Create the store with `undefined` as initialState\n//       // This allows you to set a custom default initialState\n//       const reduxStore = getOrCreateStore();\n//       // Provide the store to getInitialProps of pages\n//       appContext.ctx.reduxStore = reduxStore;\n//       let appProps = {};\n//       if (typeof App.getInitialProps === 'function') {\n//         appProps = await App.getInitialProps(appContext);\n//       }\n//       return {\n//         ...appProps,\n//         initialReduxState: reduxStore.getState(),\n//       };\n//     }\n//     constructor(props) {\n//       super(props);\n//       this.reduxStore = getOrCreateStore(props.initialReduxState);\n//     }\n//     render() {\n//       return <App {...this.props} reduxStore={this.reduxStore} />;\n//     }\n//   };\n// };","map":{"version":3,"sources":["C:/react/test_task/lib/with-redux-store.js"],"names":[],"mappings":"AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA","sourcesContent":["// import React from 'react';\r\n// import { initializeStore } from '../store';\r\n\r\n// const isServer = typeof window === 'undefined';\r\n// const __NEXT_REDUX_STORE__ = '__NEXT_REDUX_STORE__';\r\n\r\n// function getOrCreateStore(initialState) {\r\n//   // Always make a new store if server, otherwise state is shared between requests\r\n//   if (isServer) {\r\n//     return initializeStore(initialState);\r\n//   }\r\n\r\n//   // Create store if unavailable on the client and set it on the window object\r\n//   if (!window[__NEXT_REDUX_STORE__]) {\r\n//     window[__NEXT_REDUX_STORE__] = initializeStore(initialState);\r\n//   }\r\n//   return window[__NEXT_REDUX_STORE__];\r\n// }\r\n\r\n// export default App => {\r\n//   return class AppWithRedux extends React.Component {\r\n//     static async getInitialProps(appContext) {\r\n//       // Get or Create the store with `undefined` as initialState\r\n//       // This allows you to set a custom default initialState\r\n//       const reduxStore = getOrCreateStore();\r\n\r\n//       // Provide the store to getInitialProps of pages\r\n//       appContext.ctx.reduxStore = reduxStore;\r\n\r\n//       let appProps = {};\r\n//       if (typeof App.getInitialProps === 'function') {\r\n//         appProps = await App.getInitialProps(appContext);\r\n//       }\r\n\r\n//       return {\r\n//         ...appProps,\r\n//         initialReduxState: reduxStore.getState(),\r\n//       };\r\n//     }\r\n\r\n//     constructor(props) {\r\n//       super(props);\r\n//       this.reduxStore = getOrCreateStore(props.initialReduxState);\r\n//     }\r\n\r\n//     render() {\r\n//       return <App {...this.props} reduxStore={this.reduxStore} />;\r\n//     }\r\n//   };\r\n// };\r\n"]},"metadata":{},"sourceType":"script"}