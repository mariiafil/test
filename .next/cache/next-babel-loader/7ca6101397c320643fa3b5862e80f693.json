{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux';\nimport nextConnectRedux from 'next-connect-redux';\nimport ReduxThunk from 'redux-thunk';\n\nconst axios = require('axios');\n\nexport const actionTypes = {\n  FETCH_POSTS_SUCCESS: 'FETCH_POSTS_SUCCESS',\n  FETCH_POSTS_ID: 'FETCH_POSTS_ID',\n  ADD_POST: 'ADD_POST'\n};\nexport const fetchPostsSuccess = posts => ({\n  type: actionTypes.FETCH_POSTS_SUCCESS,\n  posts\n});\nexport const addPostSuccess = post => ({\n  type: ActionType.ADD_POST_SUCCESS,\n  post\n});\nexport const fetchPosts = () => dispatch => {\n  axios.get('https://simple-blog-api.crew.red/posts').then(response => {\n    dispatch(fetchPostsSuccess(response.data));\n  });\n};\nexport const fetchPostWithId = id => dispatch => {\n  axios.get(`https://simple-blog-api.crew.red/posts/${id}`).then(() => {\n    dispatch(fetchPostIdSuccess(id));\n  });\n};\nexport const addPost = post => dispatch => {\n  axios.post('https://simple-blog-api.crew.red/posts', post).then(response => {\n    dispatch(addPostSuccess(response.data));\n  });\n};\nconst initialPosts = {\n  posts: []\n};\n\nconst reducer = (state = initialPosts, action) => {\n  switch (action.type) {\n    case actionTypes.FETCH_POSTS_SUCCESS:\n      return {\n        posts: action.posts\n      };\n\n    case actionTypes.FETCH_POSTS_ERROR:\n      return {\n        error: action.error\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const store = () => {\n  return createStore(reducer, initialPosts, applyMiddleware(ReduxThunk));\n};\nexport const nextConnect = nextConnectRedux(store);","map":{"version":3,"sources":["C:/react/test_task/redux/store.js"],"names":["createStore","applyMiddleware","nextConnectRedux","ReduxThunk","axios","require","actionTypes","FETCH_POSTS_SUCCESS","FETCH_POSTS_ID","ADD_POST","fetchPostsSuccess","posts","type","addPostSuccess","post","ActionType","ADD_POST_SUCCESS","fetchPosts","dispatch","get","then","response","data","fetchPostWithId","id","fetchPostIdSuccess","addPost","initialPosts","reducer","state","action","FETCH_POSTS_ERROR","error","store","nextConnect"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,UAAP,MAAuB,aAAvB;;AACA,MAAMC,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AAEA,OAAO,MAAMC,WAAW,GAAG;AACzBC,EAAAA,mBAAmB,EAAE,qBADI;AAEzBC,EAAAA,cAAc,EAAE,gBAFS;AAGzBC,EAAAA,QAAQ,EAAE;AAHe,CAApB;AAMP,OAAO,MAAMC,iBAAiB,GAAGC,KAAK,KAAK;AACzCC,EAAAA,IAAI,EAAEN,WAAW,CAACC,mBADuB;AAEzCI,EAAAA;AAFyC,CAAL,CAA/B;AAKP,OAAO,MAAME,cAAc,GAAGC,IAAI,KAAK;AACrCF,EAAAA,IAAI,EAAEG,UAAU,CAACC,gBADoB;AAErCF,EAAAA;AAFqC,CAAL,CAA3B;AAKP,OAAO,MAAMG,UAAU,GAAG,MAAMC,QAAQ,IAAI;AAC1Cd,EAAAA,KAAK,CACFe,GADH,CACO,wCADP,EAEGC,IAFH,CAEQC,QAAQ,IAAI;AAChBH,IAAAA,QAAQ,CAACR,iBAAiB,CAACW,QAAQ,CAACC,IAAV,CAAlB,CAAR;AACH,GAJD;AAKD,CANM;AAQP,OAAO,MAAMC,eAAe,GAAGC,EAAE,IAAIN,QAAQ,IAAI;AAC/Cd,EAAAA,KAAK,CACFe,GADH,CACQ,0CAAyCK,EAAG,EADpD,EAEGJ,IAFH,CAEQ,MAAM;AACVF,IAAAA,QAAQ,CAACO,kBAAkB,CAACD,EAAD,CAAnB,CAAR;AACD,GAJH;AAKD,CANM;AAQP,OAAO,MAAME,OAAO,GAAGZ,IAAI,IAAII,QAAQ,IAAI;AACzCd,EAAAA,KAAK,CACFU,IADH,CACQ,wCADR,EACkDA,IADlD,EAEGM,IAFH,CAEQC,QAAQ,IAAI;AAChBH,IAAAA,QAAQ,CAACL,cAAc,CAACQ,QAAQ,CAACC,IAAV,CAAf,CAAR;AACD,GAJH;AAKD,CANM;AAQP,MAAMK,YAAY,GAAG;AACnBhB,EAAAA,KAAK,EAAE;AADY,CAArB;;AAIA,MAAMiB,OAAO,GAAG,CAACC,KAAK,GAAGF,YAAT,EAAuBG,MAAvB,KAAkC;AAChD,UAAQA,MAAM,CAAClB,IAAf;AACE,SAAKN,WAAW,CAACC,mBAAjB;AACE,aAAO;AACLI,QAAAA,KAAK,EAAEmB,MAAM,CAACnB;AADT,OAAP;;AAGF,SAAKL,WAAW,CAACyB,iBAAjB;AACE,aAAO;AACLC,QAAAA,KAAK,EAAEF,MAAM,CAACE;AADT,OAAP;;AAGF;AACE,aAAOH,KAAP;AAVJ;AAYD,CAbD;;AAeA,OAAO,MAAMI,KAAK,GAAG,MAAM;AACzB,SAAOjC,WAAW,CAAC4B,OAAD,EAAUD,YAAV,EAAwB1B,eAAe,CAACE,UAAD,CAAvC,CAAlB;AACD,CAFM;AAIP,OAAO,MAAM+B,WAAW,GAAGhC,gBAAgB,CAAC+B,KAAD,CAApC","sourcesContent":["import { createStore, applyMiddleware } from 'redux';\r\nimport nextConnectRedux from 'next-connect-redux'\r\nimport ReduxThunk from 'redux-thunk';\r\nconst axios = require('axios');\r\n\r\nexport const actionTypes = {\r\n  FETCH_POSTS_SUCCESS: 'FETCH_POSTS_SUCCESS',\r\n  FETCH_POSTS_ID: 'FETCH_POSTS_ID',\r\n  ADD_POST: 'ADD_POST',  \r\n};\r\n\r\nexport const fetchPostsSuccess = posts => ({\r\n  type: actionTypes.FETCH_POSTS_SUCCESS,\r\n  posts,\r\n});\r\n\r\nexport const addPostSuccess = post => ({\r\n  type: ActionType.ADD_POST_SUCCESS,\r\n  post\r\n});\r\n\r\nexport const fetchPosts = () => dispatch => {\r\n  axios\r\n    .get('https://simple-blog-api.crew.red/posts')\r\n    .then(response => {\r\n      dispatch(fetchPostsSuccess(response.data))\r\n  });\r\n};\r\n\r\nexport const fetchPostWithId = id => dispatch => {\r\n  axios\r\n    .get(`https://simple-blog-api.crew.red/posts/${id}`)\r\n    .then(() => {\r\n      dispatch(fetchPostIdSuccess(id));\r\n    });\r\n};\r\n\r\nexport const addPost = post => dispatch => {\r\n  axios\r\n    .post('https://simple-blog-api.crew.red/posts', post)\r\n    .then(response => {\r\n      dispatch(addPostSuccess(response.data));\r\n    });\r\n};\r\n\r\nconst initialPosts = {\r\n  posts: [],\r\n};\r\n\r\nconst reducer = (state = initialPosts, action) => {\r\n  switch (action.type) {\r\n    case actionTypes.FETCH_POSTS_SUCCESS:\r\n      return {\r\n        posts: action.posts,\r\n      };\r\n    case actionTypes.FETCH_POSTS_ERROR:\r\n      return {\r\n        error: action.error,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const store = () => {\r\n  return createStore(reducer, initialPosts, applyMiddleware(ReduxThunk));\r\n}\r\n\r\nexport const nextConnect = nextConnectRedux(store);"]},"metadata":{},"sourceType":"module"}