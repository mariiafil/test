{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"C:\\\\react\\\\test_task\\\\pages\\\\posts\\\\[id].js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Layout from '../../components/MyLayout';\nimport axios from 'axios';\nimport { store, nextConnect, fetchPostsWithId } from '../../redux/store';\n\nvar Post = function Post(props) {\n  return __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }, __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }, props.post.title), __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }, props.post.body));\n};\n\nPost.getInitialProps = function _callee(context) {\n  var id, res, post;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          // console.log(store);\n          id = context.query.id; // await store().dispatch(fetchPostsWithId(id));\n          // return {title: 'ss', body: 'dd'};\n\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(axios.get(\"https://simple-blog-api.crew.red/posts/\".concat(id)));\n\n        case 3:\n          res = _context.sent;\n          post = res.data;\n          return _context.abrupt(\"return\", {\n            post: post\n          });\n\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\n\nPost.propTypes = {\n  post: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    body: PropTypes.string.isRequired\n  })\n};\nexport default nextConnect(function (state) {\n  return state;\n})(Post);","map":{"version":3,"sources":["C:/react/test_task/pages/posts/[id].js"],"names":["React","PropTypes","Layout","axios","store","nextConnect","fetchPostsWithId","Post","props","post","title","body","getInitialProps","context","id","query","get","res","data","propTypes","shape","string","isRequired","state"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,MAAP,MAAmB,2BAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,KAAR,EAAeC,WAAf,EAA4BC,gBAA5B,QAAmD,mBAAnD;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAAAC,KAAK;AAAA,SACd,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKA,KAAK,CAACC,IAAN,CAAWC,KAAhB,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIF,KAAK,CAACC,IAAN,CAAWE,IAAf,CAFF,CADc;AAAA,CAAlB;;AAQAJ,IAAI,CAACK,eAAL,GAAuB,iBAAeC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACrB;AACQC,UAAAA,EAFa,GAEND,OAAO,CAACE,KAFF,CAEbD,EAFa,EAGrB;AACA;;AAJqB;AAAA,2CAKHX,KAAK,CAACa,GAAN,kDAAoDF,EAApD,EALG;;AAAA;AAKfG,UAAAA,GALe;AAMfR,UAAAA,IANe,GAMRQ,GAAG,CAACC,IANI;AAAA,2CAQd;AAAET,YAAAA,IAAI,EAAJA;AAAF,WARc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAvB;;AAWAF,IAAI,CAACY,SAAL,GAAiB;AACfV,EAAAA,IAAI,EAAER,SAAS,CAACmB,KAAV,CAAgB;AACpBV,IAAAA,KAAK,EAAET,SAAS,CAACoB,MAAV,CAAiBC,UADJ;AAEpBX,IAAAA,IAAI,EAAEV,SAAS,CAACoB,MAAV,CAAiBC;AAFH,GAAhB;AADS,CAAjB;AAOA,eAAejB,WAAW,CAAC,UAACkB,KAAD;AAAA,SAAWA,KAAX;AAAA,CAAD,CAAX,CAA8BhB,IAA9B,CAAf","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Layout from '../../components/MyLayout';\r\nimport axios from 'axios';\r\nimport {store, nextConnect, fetchPostsWithId} from '../../redux/store';\r\n\r\nconst Post = props => (\r\n    <Layout>\r\n      <h1>{props.post.title}</h1>\r\n      <p>{props.post.body}</p>\r\n    </Layout>\r\n  )\r\n\r\n\r\nPost.getInitialProps = async function(context) {\r\n  // console.log(store);\r\n  const { id } = context.query;\r\n  // await store().dispatch(fetchPostsWithId(id));\r\n  // return {title: 'ss', body: 'dd'};\r\n  const res = await axios.get(`https://simple-blog-api.crew.red/posts/${id}`);\r\n  const post = res.data;\r\n\r\n  return { post };\r\n};\r\n\r\nPost.propTypes = {\r\n  post: PropTypes.shape({\r\n    title: PropTypes.string.isRequired,\r\n    body: PropTypes.string.isRequired,\r\n  }),\r\n};\r\n\r\nexport default nextConnect((state) => state)(Post)\r\n"]},"metadata":{},"sourceType":"module"}